CREATE STREAM ksqlplayevents (SONG_ID BIGINT, DURATION BIGINT) WITH (KAFKA_TOPIC='play-events', VALUE_FORMAT='AVRO');
CREATE STREAM ksqlplayevents_min_duration AS SELECT * FROM ksqlplayevents WHERE DURATION > 30000;

CREATE STREAM ksqlsongfeed (ID BIGINT, ALBUM VARCHAR, ARTIST VARCHAR, NAME VARCHAR, GENRE VARCHAR) WITH (KAFKA_TOPIC='song-feed', VALUE_FORMAT='AVRO');
CREATE STREAM ksqlsongfeedwithkey WITH (KAFKA_TOPIC='KSQLSONGFEEDWITHKEY', VALUE_FORMAT='AVRO') AS SELECT CAST(ID AS STRING) as ID, ALBUM, ARTIST, NAME, GENRE FROM ksqlsongfeed PARTITION BY ID;
CREATE TABLE ksqlsongtable (ID VARCHAR, ALBUM VARCHAR, ARTIST VARCHAR, NAME VARCHAR, GENRE VARCHAR) WITH (KAFKA_TOPIC='KSQLSONGFEEDWITHKEY', VALUE_FORMAT='Avro', KEY='ID');

CREATE STREAM ksqlsongplays AS SELECT plays.SONG_ID AS ID, ALBUM, ARTIST, NAME, GENRE, DURATION, 1 AS KEYCOL FROM ksqlplayevents_min_duration plays LEFT JOIN ksqlsongtable songtable ON plays.SONG_ID = songtable.ID;

CREATE TABLE ksqlsongplaycounts AS SELECT ID, NAME, GENRE, KEYCOL, COUNT(*) AS COUNT2 FROM ksqlsongplays WINDOW TUMBLING (size 300 second) GROUP BY ID, NAME, GENRE, KEYCOL;
CREATE TABLE ksqltop5bygenreD AS SELECT GENRE, TOPKDISTINCT(NAME,5) FROM ksqlsongplaycounts GROUP BY GENRE;
CREATE TABLE ksqltop5D AS SELECT KEYCOL, TOPKDISTINCT(NAME,5) FROM ksqlsongplaycounts GROUP BY KEYCOL;
