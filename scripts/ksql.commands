CREATE STREAM ksqlplayevents (SONG_ID BIGINT, DURATION BIGINT) WITH (KAFKA_TOPIC='play-events', VALUE_FORMAT='avro');
CREATE STREAM ksqlplayevents_min_duration AS SELECT * FROM ksqlplayevents WHERE DURATION > 30000;

CREATE STREAM ksqlsongfeed1 (ID BIGINT, ALBUM VARCHAR, ARTIST VARCHAR, NAME VARCHAR, GENRE VARCHAR) WITH (KAFKA_TOPIC='song-feed', VALUE_FORMAT='avro');
CREATE STREAM ksqlsongfeed2 WITH (KAFKA_TOPIC='KSQLSONGFEED2') AS SELECT * FROM ksqlsongfeed1 PARTITION BY ID;
CREATE TABLE ksqlsongfeed3 (ID BIGINT, ALBUM VARCHAR, ARTIST VARCHAR, NAME VARCHAR, GENRE VARCHAR) WITH (KAFKA_TOPIC='KSQLSONGFEED2', VALUE_FORMAT='Avro', KEY='ID');
CREATE TABLE ksqlsongtable AS SELECT CAST (ID AS VARCHAR) AS ID, ALBUM, ARTIST, NAME, GENRE FROM ksqlsongfeed3;

CREATE STREAM ksqlsongplays AS SELECT plays.SONG_ID AS ID, ALBUM, ARTIST, NAME, GENRE, DURATION, 1 AS KEYCOL FROM ksqlplayevents_min_duration plays LEFT JOIN ksqlsongtable songtable ON plays.SONG_ID = songtable.ID;

CREATE TABLE ksqlsongplaycounts AS SELECT ID, NAME, COUNT(*) AS COUNT FROM ksqlsongplays WINDOW TUMBLING (size 300 second) GROUP BY ID, NAME;

CREATE TABLE ksqltop5bygenre AS SELECT GENRE, TOPKDISTINCT(NAME,5) FROM ksqlsongplays GROUP BY GENRE;
CREATE TABLE ksqltop5 AS SELECT KEYCOL, TOPKDISTINCT(NAME,5) FROM ksqlsongplays GROUP BY KEYCOL;
